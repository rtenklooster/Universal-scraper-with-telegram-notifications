Ik wil een scraper / zoekwekker maken voor diverse platformen. 
De scraper moet producten kunnen vinden op basis van een zoekopdracht en een notificatie sturen wanneer er een nieuw product is gevonden, of wanneer een product in prijs is gedaald.

De scraper moet kunnen werken met verschillende retailers zoals Lidl, Marktplaats, Vinted, etc.
De scraper moet een Telegram bot zijn die notificaties stuurt naar gebruikers die zich hebben geabonneerd op een bepaalde zoekopdracht.
De zoekintervallen moeten instelbaar zijn per gebruiker.
De scraper moet kunnen werken met meerdere gebruikers en zoekopdrachten tegelijkertijd.
Per retailer moet er kunnen worden ingesteld of er gebruik moet worden gemaakt van een rotating proxy, en een wisselende user-agent.
Bedenk een projectstructuur voor dit project, en een geschikte programmeertaal en libraries.

De database moet ergens online kunnen worden gedraaid (azure bij voorkeur maar dan wel zo goedkoop mogelijk) zodat de logica en uitvoering kan worden aangepast.
Aanvankelijk mag er gewoon een sqlite database worden gebruikt, maar deze moet later kunnen worden omgezet naar een online database.

Ik heb een werkende scraper voor Lidl, maar deze is geschreven in Python en maakt gebruik van de requests library.
Deze is hier te vinden: https://github.com/rtenklooster/Lidl-scraper-telegram
En een werkende voor vinted: https://github.com/rtenklooster/Vinted_Telegram



multi-scraper/
├── bot.py                   # Just initializes components and starts app
├── config.py                # Enhanced configuration management
├── database.py              # Database access layer
├── requester.py             # HTTP request handling
├── logger.py                # Logging configuration
│
├── core/                    # Core functionality
│   ├── __init__.py
│   ├── bot_app.py           # Main bot application class
│   ├── scheduler.py         # Scheduler implementation
│   └── exceptions.py        # Custom exceptions
│
├── handlers/                # Telegram message handlers
│   ├── __init__.py
│   ├── command_handlers.py  # Command handling
│   ├── callback_handlers.py # Callback query handling
│   └── message_handlers.py  # Text message handling
│
├── services/                # Business logic services
│   ├── __init__.py
│   ├── query_service.py     # Query management
│   ├── product_service.py   # Product data processing
│   └── user_service.py      # User management
│
├── notification/            # Notification system
│   ├── __init__.py
│   ├── notifier.py          # Core notification logic
│   └── formatters.py        # Message formatting
│
├── scrapers/                # Scrapers for different retailers
│   ├── __init__.py
│   ├── base.py              # Base scraper class
│   ├── lidl.py              # Lidl implementation
│   ├── marktplaats.py       # Marktplaats implementation
│   ├── vinted.py            # Vinted implementation
│   └── (other retailers)    # Future implementations
│
├── tests/                   # Unit and integration tests
│   ├── __init__.py
│   ├── test_bot.py          # Tests for bot.py
│   ├── test_config.py       # Tests for config.py
│   ├── test_database.py     # Tests for database.py
│   ├── test_requester.py    # Tests for requester.py
│   └── (other tests)        # Future tests
│
└── docs/                    # Project documentation
    ├── index.md             # Documentation index
    └── (other docs)         # Future documentation